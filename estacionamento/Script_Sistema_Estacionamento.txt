‚úÖ Objetivo
Criar um sistema de estacionamento moderno e responsivo, 100% baseado em HTML, CSS e JavaScript puros, que ser√° hospedado em um servidor simples (sem backend). Toda a l√≥gica de neg√≥cios, leitura, grava√ß√£o e exclus√£o de dados ser√° feita por meio de uma API externa. Os c√°lculos de perman√™ncia e valor ser√£o processados no frontend.

O sistema ter√° tr√™s √°reas principais:

√Årea do SuperAdmin: Cadastro e gest√£o de empresas (clientes do sistema de estacionamento).
√Årea do Cliente: Consulta de informa√ß√µes do ticket de estacionamento (p√∫blica).
√Årea Administrativa: Gest√£o do estacionamento por parte da empresa (usu√°rios do estacionamento).
üîó Integra√ß√£o com API
A principal regra √© que o sistema deve receber apenas uma vari√°vel com a URL base da API. Todas as rotas ser√£o montadas dinamicamente com base nela.

JavaScript

const API_BASE_URL = "https://api.exemplo.com"; // Valor definido pelo administrador

Exemplos de Endpoints (rotas completas):
A√ß√£o	M√©todo	Endpoint Completo	Detalhes da Requisi√ß√£o (Exemplos)
Login (Admin/Operador)	POST	${API_BASE_URL}/auth/login	Body: { "email": "...", "password": "..." }
Login (SuperAdmin)	POST	${API_BASE_URL}/auth/superadmin-login	Body: { "email": "...", "password": "..." }
Listar ve√≠culos no p√°tio	GET	${API_BASE_URL}/patio	Headers: Authorization: Bearer <token>
Registrar entrada	POST	${API_BASE_URL}/entrada	Body: { "placa": "...", "modelo": "...", "cor": "..." }
Registrar sa√≠da	POST	${API_BASE_URL}/saida	Body: { "ticketId": "...", "valorPago": "...", "formaPagamento": "..." }
Buscar ticket (p√∫blico/cliente)	GET	${API_BASE_URL}/ticket?ticketId={ticketId}	Query param: ticketId ou telefone
Verificar hist√≥rico da placa	GET	${API_BASE_URL}/historico?placa={placa}	Query param: placa
Consultar mensalistas	GET	${API_BASE_URL}/mensalistas	
Enviar mensagem (SMS/WhatsApp)	POST	${API_BASE_URL}/mensagem	Body: { "telefone": "...", "conteudo": "..." }
Buscar servi√ßos	GET	${API_BASE_URL}/servicos	
Registrar servi√ßo avulso	POST	${API_BASE_URL}/servicos-avulsos	Body: { "placa": "...", "servicosIds": [], "valorTotal": "..." }
Gerar relat√≥rios	GET	${API_BASE_URL}/relatorios?data_inicial=...	Query params: data_inicial, data_final
Cadastrar Empresa	POST	${API_BASE_URL}/empresas	Body: { "nome": "...", "cnpj": "...", "dataValidadeLicenca": "YYYY-MM-DD" }
Listar Empresas	GET	${API_BASE_URL}/empresas	
Atualizar Empresa	PUT	${API_BASE_URL}/empresas/{id}	Body: { "nome": "...", "dataValidadeLicenca": "YYYY-MM-DD" }
Deletar Empresa	DELETE	${API_BASE_URL}/empresas/{id}	
Cadastrar Usu√°rio (Empresa)	POST	${API_BASE_URL}/auth/register/empresa	Body: { "empresaId": "...", "email": "...", "password": "...", "nivelAcesso": "..." }
Listar Usu√°rios (por empresa)	GET	${API_BASE_URL}/users/empresa/{empresaId}	
Atualizar Usu√°rio (Empresa)	PUT	${API_BASE_URL}/users/{id}	Body: { "email": "...", "nivelAcesso": "..." }
Deletar Usu√°rio (Empresa)	DELETE	${API_BASE_URL}/users/{id}	
CRUD de Pre√ßos	POST/GET/PUT/DELETE	${API_BASE_URL}/precos	GET retorna { "faixas": [...], "horaAdicional": ..., "diaria": ... }
CRUD de Mensalistas	POST/GET/PUT/DELETE	${API_BASE_URL}/mensalistas	
CRUD de Isentos	POST/GET/PUT/DELETE	${API_BASE_URL}/isentos	
CRUD de Servi√ßos	POST/GET/PUT/DELETE	${API_BASE_URL}/servicos	

Exportar para as Planilhas
üéØ Funcionalidades Obrigat√≥rias
Estrutura de Arquivos Sugerida
/
‚îú‚îÄ‚îÄ index.html                  (√Årea do Cliente/P√∫blica)
‚îú‚îÄ‚îÄ login.html                  (Login para Administradores de Empresas)
‚îú‚îÄ‚îÄ superadmin-login.html       (Login para SuperAdmin)
‚îú‚îÄ‚îÄ admin-dashboard.html        (Dashboard da √Årea Administrativa da Empresa)
‚îú‚îÄ‚îÄ superadmin-dashboard.html   (Dashboard da √Årea do SuperAdmin)
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ style.css               (Estilos gerais e modais)
‚îÇ   ‚îî‚îÄ‚îÄ responsive.css          (Estilos para responsividade)
‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îú‚îÄ‚îÄ config.js               (Onde API_BASE_URL ser√° definido)
‚îÇ   ‚îú‚îÄ‚îÄ auth.js                 (Fun√ß√µes de autentica√ß√£o, logout, verifica√ß√£o de token)
‚îÇ   ‚îú‚îÄ‚îÄ api.js                  (Fun√ß√µes para chamadas padronizadas √† API - fetch/axios like)
‚îÇ   ‚îú‚îÄ‚îÄ ui.js                   (Fun√ß√µes para manipula√ß√£o de UI - modais, alertas, loadings)
‚îÇ   ‚îú‚îÄ‚îÄ superadmin.js           (L√≥gica espec√≠fica do SuperAdmin e dashboards)
‚îÇ   ‚îú‚îÄ‚îÄ admin.js                (L√≥gica espec√≠fica da √Årea Administrativa da Empresa e dashboards)
‚îÇ   ‚îú‚îÄ‚îÄ common.js               (Fun√ß√µes JS comuns a todo o sistema - ex: formatar data, validar placa)
‚îÇ   ‚îî‚îÄ‚îÄ calculations.js         (L√≥gica para c√°lculo de tempo de perman√™ncia e valor)
‚îî‚îÄ‚îÄ assets/                     (Imagens, √≠cones, etc.)
√Årea do Cliente (index.html)
Consulta por n√∫mero do ticket ou telefone: Campo de entrada e bot√£o de busca.
Exibi√ß√£o dos resultados: Tempo de perman√™ncia, dados do ve√≠culo (placa, modelo, cor), valor estimado (se aplic√°vel, com base na entrada).
Exibi√ß√£o de informa√ß√µes est√°ticas: Nome e localiza√ß√£o do estacionamento.
Autentica√ß√£o
Tela de Login do Administrador (login.html): Formul√°rio de usu√°rio/senha para equipes de estacionamento.
Tela de Login do SuperAdmin (superadmin-login.html): Formul√°rio de usu√°rio/senha para o SuperAdmin.
Prote√ß√£o de Rotas: Redirecionamento autom√°tico para a p√°gina de login se n√£o houver token v√°lido no localStorage ou se o token for expirado.
N√≠veis de Acesso: Token JWT retornado pela API conter√° o n√≠vel de acesso (SuperAdmin, Master, Operador, Visualizador).
Redirecionamento P√≥s-Login: Usu√°rios SuperAdmin s√£o redirecionados para superadmin-dashboard.html, outros para admin-dashboard.html.
Logout: Bot√£o de logout que limpa o token e redireciona para a tela de login.
√Årea do SuperAdmin (superadmin-dashboard.html)
Dashboard de Empresas:
Tabela din√¢mica com a lista de todas as empresas cadastradas: Nome, CNPJ, Data de Validade da Licen√ßa, Status (Ativa/Expirada/Pr√≥xima a expirar).
Destaque Visual: Linhas ou c√©lulas com cores diferentes para licen√ßas expiradas ou pr√≥ximas do vencimento (ex: nos pr√≥ximos 30 dias).
Bot√µes de a√ß√£o por linha: Editar Empresa (abre modal), Excluir Empresa (confirma√ß√£o via modal), Gerenciar Usu√°rios (abre modal).
Bot√£o "Cadastrar Nova Empresa" (abre modal de Cadastro/Edi√ß√£o de Empresa).
Modal de Cadastro/Edi√ß√£o de Empresa:
Formul√°rio para: Nome da Empresa, CNPJ, Endere√ßo, Telefone, Email de Contato, Data de Validade da Licen√ßa (input type="date").
Valida√ß√£o de campos obrigat√≥rios.
Bot√µes "Salvar" (envia POST /empresas ou PUT /empresas/{id}) e "Cancelar".
Modal de Gest√£o de Usu√°rios da Empresa:
Tabela listando usu√°rios da empresa selecionada: Email, N√≠vel de Acesso.
Bot√µes de a√ß√£o por linha: Editar Usu√°rio (abre modal de edi√ß√£o de usu√°rio), Excluir Usu√°rio (confirma√ß√£o via modal).
Bot√£o "Cadastrar Novo Usu√°rio" (abre modal de Cadastro/Edi√ß√£o de Usu√°rio).
Modal de Cadastro/Edi√ß√£o de Usu√°rio (para empresas):
Formul√°rio para: Email, Senha (apenas no cadastro), N√≠vel de Acesso (dropdown: Master, Operador, Visualizador).
Bot√µes "Salvar" (envia POST /auth/register/empresa ou PUT /users/{id}) e "Cancelar".
Dashboard Principal (Admin da Empresa) (admin-dashboard.html)
P√°tio Atual: Tabela din√¢mica exibindo ve√≠culos atualmente no p√°tio: Placa, Modelo, Cor, Tempo de Perman√™ncia (calculado dinamicamente no frontend), Ticket ID.
Bot√£o "Nova Entrada" (abre Modal de Entrada de Ve√≠culo).
Bot√£o "Sa√≠da" (abre Modal de Sa√≠da de Ve√≠culo).
Menu Lateral Fixo:
P√°tio (link para a pr√≥pria p√°gina, atualiza a tabela).
Gest√£o de Pre√ßos (abre Modal de Gest√£o de Pre√ßos).
Mensalistas (abre Modal de Gest√£o de Mensalistas).
Isentos (abre Modal de Gest√£o de Isentos).
Servi√ßos Avulsos (abre Modal de Servi√ßos Avulsos).
Relat√≥rios (abre Modal de Relat√≥rios).
Topbar: Exibe nome do usu√°rio logado, n√≠vel de acesso e bot√£o de logout.
Modais de Opera√ß√£o (Admin da Empresa)
Modal de Entrada de Ve√≠culo:
Campo para digitar Placa.
Ao digitar a placa: Requisi√ß√£o GET /historico?placa={placa}. Se houver hist√≥rico, preenche Modelo e Cor automaticamente.
Verifica√ß√£o visual: Se o ve√≠culo j√° est√° no p√°tio (evitar duplicidade), se √© mensalista ou isento (com destaque).
Op√ß√£o de Telefone (campo input) ou Imprimir Ticket (checkbox).
Bot√£o "Confirmar Entrada" (envia POST /entrada).
Feedback de sucesso/erro e atualiza√ß√£o da tabela de p√°tio.
Modal de Sa√≠da de Ve√≠culo:
Campo para digitar Ticket ID.
Ao digitar o Ticket ID: Requisi√ß√£o GET /ticket?ticketId={ticketId} para obter dataHoraEntrada, placa, modelo, cor.
C√°lculo Frontend: JavaScript calcula o Tempo de Perman√™ncia (diferen√ßa entre dataHoraEntrada e hora atual) e o Valor a Pagar (baseado nas regras de pre√ßos lidas da API - GET /precos).
Exibe o tempo de perman√™ncia e o valor calculado.
Dropdown para selecionar Forma de Pagamento.
Campo opcional para CPF do cliente.
Op√ß√£o de Enviar Mensagem (SMS/WhatsApp) ou Imprimir Comprovante (checkbox).
Bot√£o "Confirmar Sa√≠da" (envia POST /saida).
Feedback de sucesso/erro e atualiza√ß√£o da tabela de p√°tio.
Modal de Servi√ßos Avulsos:
Campo para digitar Placa do ve√≠culo (mesma l√≥gica de hist√≥rico da entrada).
Lista de Servi√ßos cadastrados (lida de GET /servicos) com checkboxes para sele√ß√£o m√∫ltipla.
C√°lculo Frontend: Valor total √© calculado dinamicamente com base nos servi√ßos selecionados.
Bot√£o "Confirmar Servi√ßo" (envia POST /servicos-avulsos).
Modal de Gest√£o de Pre√ßos:
Interface para definir faixas de hor√°rio e valores (tabela edit√°vel ou formul√°rios din√¢micos). Ex: "0-1h: R$X", "hora adicional: R$Y", "di√°ria: R$Z".
CRUD de pre√ßos via API (/precos).
Modal de Gest√£o de Mensalistas e Isentos:
Tabela com lista atual de mensalistas/isentos.
Bot√µes para Cadastro e Edi√ß√£o (formul√°rios para Nome, Placa, Per√≠odo de Validade).
CRUD via API (/mensalistas, /isentos).
Modal de Relat√≥rios:
Campos "Data Inicial" e "Data Final" para filtro.
Bot√£o "Gerar Relat√≥rio" (chama GET /relatorios).
Tabela de resultados com: Total de Ve√≠culos (entradas/sa√≠das), Total Arrecadado, Detalhes de Servi√ßos Realizados.
Dados vindos da API.
Bot√£o para Exportar (ex: CSV), se a API ou o frontend oferecerem.
üì± Interface e Layout
Totalmente responsivo utilizando Flexbox e Grid para adapta√ß√£o a diferentes tamanhos de tela (celular, tablet e desktop).
Layout limpo, moderno e direto, com foco na usabilidade e clareza das informa√ß√µes.
Modais personalizados para todas as intera√ß√µes de cadastro/edi√ß√£o/opera√ß√£o, com overlays e anima√ß√µes.
Alertas de sistema via modais espec√≠ficos (sucesso, erro, confirma√ß√£o).
Menu lateral fixo (sidebar) nas √°reas administrativa e SuperAdmin.
Topbar consistente em todas as p√°ginas autenticadas, com nome do usu√°rio, n√≠vel de acesso e bot√£o de logout.
Indicadores de loading (spinners) em bot√µes e overlays para opera√ß√µes ass√≠ncronas.
üõ°Ô∏è Seguran√ßa
Armazenamento de Token: Token JWT armazenado com seguran√ßa no localStorage ap√≥s o login.
Controle de Acesso Frontend: JavaScript verifica a presen√ßa e validade do token e o n√≠vel de acesso para permitir/negar acesso a rotas e funcionalidades.
Valida√ß√£o de Entrada: Valida√ß√£o de todos os campos obrigat√≥rios e formato dos dados no frontend antes do envio para a API.
Preven√ß√£o de Cliques Duplos: Desabilitar bot√µes de submiss√£o e mostrar loading durante requisi√ß√µes para evitar chamadas duplicadas.
Tratamento de Erros de API: Exibi√ß√£o de mensagens amig√°veis em caso de falha da API ou erros de rede.
üîß Tecnologias
HTML5: Estrutura sem√¢ntica das p√°ginas.
CSS3: Estiliza√ß√£o, responsividade, anima√ß√µes.
JavaScript (ES6+): Toda a l√≥gica de frontend, manipula√ß√£o do DOM, requisi√ß√µes ass√≠ncronas (Workspace API).
Sem frameworks ou bibliotecas externas obrigat√≥rias (ex: React, Vue, Angular, jQuery).
üì¶ Observa√ß√µes Finais
O sistema n√£o possui banco de dados local. Todos os dados s√£o gerenciados pela API externa.
A IA deve gerar os arquivos HTML, CSS e JS separados, organizados nas pastas css/ e js/ conforme a estrutura sugerida.
A configura√ß√£o do API_BASE_URL ser√° centralizada em js/config.js para f√°cil edi√ß√£o.
A l√≥gica de associa√ß√£o de usu√°rios a empresas e a validade de licen√ßas s√£o gerenciadas pela API (apenas o frontend interage com esses dados).